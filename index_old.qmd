---
title: " "
execute: 
  echo: false
---


## How many are Languages are Endangered? 

According to the World Economic Forum there are approximately 7,000 known living languages. One-third of these languages are African and most of the world speaks one of 20 languages. Two-fifths of the world’s languages are positioned to die out.

Not all endangered languages are at equal risk of dying out. Here is UNESCO’s classification system which shows how vulnerable a language is:

| Classification | Explanation |
|----------------|-------------|
| Vulnerable     | Most children speak the language, but it may be restricted to certain domains                           (e.g., home). |
| Definitely Endangered | Children no longer learn the language as a 'mother tongue' in the home. |                
| Severely Endangered | Language is spoken by grandparents and older generations; while the parent                               generation may understand it, they do not speak it to children or among                                  themselves. |         
| Critically Endangered | The youngest speakers are grandparents and older, and they speak the language                            partially and infrequently. |            
| Extinct        | There are no speakers left. |


## Global Map Sphere 

The map below shows most countries scale on which level of endangered language their in based on the UNESCO’s classification system. 1 meaning on average it has vulnerable
languages all the way to 5 meaning on average it has extinct languages.  


```{r}
#| message: false
# All code copied from Project_Ideas: visualize_02_interactive_global_map.R
```


```{r}
#| message: false
#Packages
library(tidyverse) # for data manipulation
library(knitr)     # for nice table prints
```


```{r}
#| message: false
path_raw_data <- 'https://raw.githubusercontent.com/mrbalikci/endangered-languages/master/data.csv'
```


```{r}
#| message: false
# Cleaning the data
raw_data_languages <- read_csv(path_raw_data) |>
  # clean the column names: remove spacing and special characters
  janitor::clean_names()
```


```{r}
#| message: false
# Cleaning the rows through separating. 
raw_data_languages <- raw_data_languages |>
  separate_rows(countries, country_codes_alpha_3, sep = ',') |>
  separate_rows(iso639_3_codes, sep = ',') |>
  distinct(id, countries, country_codes_alpha_3,iso639_3_codes, .keep_all = TRUE) |>
  mutate(countries = str_replace_all(countries, "\\s*\\(.*", "")) |>
  mutate_if(is.character, str_squish) 
```


```{r, warning=FALSE}
#| message: false
# Using coordinates to identify single country as based reference ---------

na.coord <- raw_data_languages |> filter(is.na(longitude)) |> 
  mutate(country_codes_alpha_3_coord=country_codes_alpha_3)


getMapGepProp<-function(){
  list(
    showframe = T,
    showocean = T,
    #oceancolor = 'rgb(28,107,160)',
    oceancolor = 'rgb(222,243,246)',
    projection = list(
      type = 'orthographic',
      rotation = list(
        lon = 60,
        lat = 10)
    ),
    lonaxis =  list(
      showgrid = F,
      gridcolor = 'rgb(102, 102, 102)'
    ),
    lataxis = list(
      showgrid = F,
      gridcolor = 'rgb(102, 102, 102)'
    )
  )
}

coords2location = function(points){  
  require(sp)
  require(rworldmap)
  require(rworldxtra)
  countriesSP <- getMap(resolution='high')
  
  # converting points to a SpatialPoints object
  # setting CRS directly to that from rworldmap
  pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
  
  
  # use 'over' to get indices of the Polygons object containing each point 
  indices = over(pointsSP, countriesSP)
  
  #indices$continent   # returns the continent (6 continent model)
  #indices$REGION   # returns the continent (7 continent model)
  #indices$ADMIN  #returns country name
  #indices$ISO3 # returns the ISO3 code 
  
  indices$ISO3
}


raw_data_languages <- raw_data_languages |> filter(!is.na(longitude)) |>
  mutate(mult= country_codes_alpha_3 =="" | grepl(",", country_codes_alpha_3),
         country_codes_alpha_3_coord=
           ifelse(mult,as.character(
             coords2location(data.frame(lng=longitude, lat=latitude))), 
             country_codes_alpha_3 ) ) |> select(-mult)


#Correct country code SDS to SDN
sds_rec <- raw_data_languages |> 
  filter(country_codes_alpha_3_coord=="SDS") |> 
  mutate(country_codes_alpha_3_coord="SDN")


raw_data_languages <- rbind(raw_data_languages |> filter(!(id %in% sds_rec$id)), 
                          sds_rec,
                          na.coord)



#Manual lookup using Google Map
raw_data_languages[raw_data_languages$id == 262, "country_codes_alpha_3_coord"]<-"CAN"
raw_data_languages[raw_data_languages$id == 1010, "country_codes_alpha_3_coord"]<-"THA"
raw_data_languages[raw_data_languages$id == 1964, "country_codes_alpha_3_coord"]<-"VEN"


# Re-index Degree of Endangerment for languages on country boundary -------

raw_data_languages <- raw_data_languages |> 
  mutate(doe_num=as.numeric(factor(degree_of_endangerment, 
                                   levels=c("Vulnerable", "Definitely endangered", 
                                            "Severely endangered", "Critically endangered",
                                            "Extinct")))) 


country_doe<-aggregate( doe_num ~ country_codes_alpha_3, data=raw_data_languages,
                        function(x) { 
                          c(idx.med=median(x), idx.avg=round(mean(x),1), count=length(x))})


country_doe <- data.frame(country_codes=country_doe$country_codes_alpha_3,
                          degree_of_endangerment_median=country_doe$doe_num[,1],
                          degree_of_endangerment_mean=country_doe$doe_num[,2],
                          language_count=country_doe$doe_num[,3]) 

cleanCountryName <- function(country.df) {
  require(dplyr)
  require(countrycode)
  country.df<-country_doe |> 
    mutate(country.name=countrycode(country_doe$country_codes, "iso3c", "country.name", warn=F))
  country.df[country_doe$country_codes=="ANG", "Country.name"] = "Angola"
  country.df[country_doe$country_codes=="ZAI", "Country.name"] = "Democratic Republic of the Congo"
  country.df
}


country_doe <- cleanCountryName(country_doe) %>% janitor::clean_names() %>%
  mutate(
    country_name = coalesce(country_name, country_name_2)
  ) %>%
  dplyr::select(-country_name_2)

# glimpse(country_doe)
```


```{r}
#| message: false
# Plot -------
require(plotly)
plot_geo(locations=country_doe$country_codes,
         marker = list(colorbar = list(title = 'Country Median DoE')),
         colorscale="YlOrRd",
         text=paste(country_doe$country_name, country_doe$language_count, sep = "-"),
         z=country_doe$degree_of_endangerment_median) %>%
  layout(
    showlegend = T, geo = getMapGepProp(),
    title = 'World Language Degree of Endangerment Scale by Country<br>(Click and drag to rotate)'
  )
```



## World Map of the Classification of Endangered Langueages 

The map below shows the classification of endangerment of languages in each country that are know of so far.

```{r}
# Packages

# Data Manipulation
library(tidyverse) # For data manipulation
library(janitor)   # For clean column names, and other utilities
library(glue)      # String manipulation

# Interactive Maps
library(htmltools)
library(plotly)    # For interactive plots
library(leaflet)   # For interactive maps

# Map packages
library(sf)        # For map shape files
library(tigris)   
library(rnaturalearth)
library(ggspatial)

# Plotting packages
library(scales)
library(patchwork) 
library(RColorBrewer)
```


```{r}
# Collect/read the data
source('data_02_cleaning.R')
```


```{r}
map_data <- elp_data %>% 
  dplyr::select(latitude, longitude, endangerment_degree, confidence_in_degree, name_in_the_language) %>%
  mutate(endangerment_degree = factor(endangerment_degree, levels = elp_data_order_of_severity)) %>%
  mutate(confidence_in_degree = rescale(confidence_in_degree, to = c(5, 10))) %>%
  # drop_na() %>%
  I()


elp_data_order_of_severity = c(
  "At risk",
  "Vulnerable",
  "Endangered",
  "Severely Endangered",
  "Critically Endangered",
  "Threatened",
  "Dormant or Extinct",
  "Awakening",
  "Vitality Unknown"
)

color_pal <- colorFactor(
  palette = c(
    'green',
    'orange',
    '#D73377',
    '#4A0D67', 
    'red',
    '#6F0C17',
    'black',
    '#002642',
    'grey'
    
  ),
  domain = map_data$endangerment_degree
)
```


```{r}
# Begin Plot -----------------


interactive_map <- leaflet() %>%
  addTiles()

interactive_map <- interactive_map %>% 
  addCircleMarkers(
    data = map_data,  # Use your data frame
    lng = ~longitude,  # Column name for longitude
    lat = ~latitude,  # Column name for latitude
    color = ~color_pal(endangerment_degree),  # Column name for the categorical variable
    radius = ~confidence_in_degree,  # Size of the markers
    stroke = FALSE,  # Remove stroke around markers
    fillOpacity = 0.7,  # Opacity of the markers
    label = ~name_in_the_language #endangerment_degree  # Display the category label on hover
  )



tag.map.title <- tags$style(HTML("
  .leaflet-control.map-title { 
    transform: translate(-50%,20%);
    position: fixed !important;
    left: 50%;
    text-align: center;
    padding-left: 10px; 
    padding-right: 10px; 
    background: rgba(255,255,255,0.75);
    font-weight: bold;
    font-size: 28px;
  }
"))

title <- tags$div(
  tag.map.title, HTML("Classification of Endangered Languages across the World.<br>Size of radius represent degree of belief in classification")
)  



interactive_map %>%
  addLegend(data = map_data,
            "topright", pal = color_pal, values = ~endangerment_degree,
            title = "Degree of Endangerment",
            opacity = 1
  ) %>%
  addControl(title, position = "topleft", className="map-title")
```



